// bu function'larin cogu chatgpt ile hazirlanmistir, bu tarz islemler icin chatgpt kullanilabilir.

import { type ClassValue, clsx } from "clsx";

import { twMerge } from "tailwind-merge";
// Parse and stringify URL query strings
// yarn add query-string
// console.log(location.search);
// //=> '?foo=bar'

// const parsed = queryString.parse(location.search);
// console.log(parsed);
// //=> {foo: 'bar'}

// console.log(location.hash);
// //=> '#token=bada55cafe'

// const parsedHash = queryString.parse(location.hash);
// console.log(parsedHash);
// //=> {token: 'bada55cafe'}

// parsed.foo = 'unicorn';
// parsed.ilike = 'pizza';

// const stringified = queryString.stringify(parsed);
// //=> 'foo=unicorn&ilike=pizza'

// location.search = stringified;
// // note that `location.search` automatically prepends a question mark
// console.log(location.search);
// //=> '?foo=unicorn&ilike=pizza'
import qs from "query-string";

import { UrlQueryParams, RemoveUrlQueryParams } from "@/types";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl
// Intl namespace object'i, Ã§eÅŸitli constructor'larin yanÄ± sÄ±ra internationalization constructor'lari ve diÄŸer dile duyarli function'lari iÃ§in ortak iÅŸlevsellik iÃ§erir. Toplu olarak, dile duyarlÄ± string comparison, number formatting, date and time formatting ve daha fazlasÄ±nÄ± saÄŸlayan ECMAScript Internationalization API'sini oluÅŸtururlar.

// const count = 26254.39;
// const date = new Date("2012-05-24");

// function log(locale) {
//   console.log(
//     `${new Intl.DateTimeFormat(locale).format(date)} ${new Intl.NumberFormat(
//       locale,
//     ).format(count)}`,
//   );
// }

// log("en-US"); // 5/24/2012 26,254.39

// log("de-DE"); // 24.5.2012 26.254,39

// TypeScript de Intl namespace object'i icin built-in type'lar icerir.
// https://microsoft.github.io/PowerBI-JavaScript/modules/_node_modules_typedoc_node_modules_typescript_lib_lib_es5_d_.intl.html

// https://microsoft.github.io/PowerBI-JavaScript/interfaces/_node_modules_typedoc_node_modules_typescript_lib_lib_es5_d_.intl.datetimeformatoptions.html
export const formatDateTime = (dateString: Date) => {
  const dateTimeOptions: Intl.DateTimeFormatOptions = {
    weekday: "short", // abbreviated weekday name (e.g., 'Mon')
    month: "short", // abbreviated month name (e.g., 'Oct')
    day: "numeric", // numeric day of the month (e.g., '25')
    hour: "numeric", // numeric hour (e.g., '8')
    minute: "numeric", // numeric minute (e.g., '30')
    hour12: true, // use 12-hour clock (true) or 24-hour clock (false)
  };

  const dateOptions: Intl.DateTimeFormatOptions = {
    weekday: "short", // abbreviated weekday name (e.g., 'Mon')
    month: "short", // abbreviated month name (e.g., 'Oct')
    year: "numeric", // numeric year (e.g., '2023')
    day: "numeric", // numeric day of the month (e.g., '25')
  };

  const timeOptions: Intl.DateTimeFormatOptions = {
    hour: "numeric", // numeric hour (e.g., '8')
    minute: "numeric", // numeric minute (e.g., '30')
    hour12: true, // use 12-hour clock (true) or 24-hour clock (false)
  };

  const formattedDateTime: string = new Date(dateString).toLocaleString(
    "en-US",
    dateTimeOptions
  );

  const formattedDate: string = new Date(dateString).toLocaleString(
    "en-US",
    dateOptions
  );

  const formattedTime: string = new Date(dateString).toLocaleString(
    "en-US",
    timeOptions
  );

  return {
    dateTime: formattedDateTime,
    dateOnly: formattedDate,
    timeOnly: formattedTime,
  };
};

// URL.createObjectURL() static method'u, parametrede verilen object'i temsil eden bir URL iÃ§eren bir string oluÅŸturur. URL'nin Ã¶mrÃ¼, oluÅŸturulduÄŸu window'daki document'a baÄŸlÄ±dÄ±r. Yeni object URL'si belirtilen File object'ini veya Blob object'ini temsil eder. Bir object URL'i serbest bÄ±rakmak iÃ§in revokeObjectURL() Ã¶ÄŸesi cagirilir.

// URL.createObjectURL() tarafÄ±ndan oluÅŸturulan URL'ler geÃ§icidir. Sayfa yenilendiÄŸinde veya document silindiÄŸinde URL'ler geÃ§ersiz hale gelir.
// URL.createObjectURL()'yi kullanÄ±rken bellek sÄ±zÄ±ntÄ±larÄ±nÄ± Ã¶nlemek iÃ§in URL.revokeObjectURL()'yi kullanarak oluÅŸturulan URL'leri serbest bÄ±rakmanÄ±z Ã¶nemlidir.

// Diyelim ki bir resim yÃ¼kleme uygulamasÄ± geliÅŸtiriyoruz. KullanÄ±cÄ± resim seÃ§tikten sonra, Ã¶nizleme gÃ¶rÃ¼ntÃ¼sÃ¼nÃ¼ gÃ¶stermek istiyoruz. Bunu yapmak iÃ§in URL.createObjectURL()'yi kullanabiliriz:

// const file = document.querySelector('#file-input').files[0];
// const objectUrl = URL.createObjectURL(file);

// const img = document.querySelector('#preview-image');
// img.src = objectUrl;

// // KullanÄ±cÄ± resim seÃ§meyi bitirdiÄŸinde URL'yi serbest bÄ±rakÄ±n
// document.querySelector('#file-submit').addEventListener('click', () => {
//   URL.revokeObjectURL(objectUrl);
// });

// file deÄŸiÅŸkeni, kullanÄ±cÄ± tarafÄ±ndan seÃ§ilen dosyayÄ± temsil eder.
// objectUrl deÄŸiÅŸkeni, file nesnesini temsil eden bir URL iÃ§erir.
// img Ã¶ÄŸesinin src Ã¶zniteliÄŸi, objectUrl deÄŸerine ayarlanÄ±r.
// file-submit dÃ¼ÄŸmesine tÄ±klandÄ±ÄŸÄ±nda, URL.revokeObjectURL() kullanÄ±larak objectUrl serbest bÄ±rakÄ±lÄ±r.

// URL.revokeObjectURL()'yi yalnÄ±zca URL'ye ihtiyacÄ±nÄ±z kalmadÄ±ÄŸÄ±nda kullanÄ±n.
// Birden fazla URL oluÅŸturuyorsanÄ±z, her birini ayrÄ± ayrÄ± serbest bÄ±rakmanÄ±z gerekir.
// Bellek sÄ±zÄ±ntÄ±larÄ±nÄ± Ã¶nlemek iÃ§in URL.revokeObjectURL()'yi kullanmak Ã¶nemlidir. Bu, web uygulamanÄ±zÄ±n daha hÄ±zlÄ± ve daha gÃ¼venilir Ã§alÄ±ÅŸmasÄ±nÄ± saÄŸlar.

export const convertFileToUrl = (file: File) => URL.createObjectURL(file);

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat
export const formatPrice = (price: string) => {
  const amount = parseFloat(price);
  const formattedPrice = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(amount);

  return formattedPrice;
};

export function formUrlQuery({ params, key, value }: UrlQueryParams) {
  console.log("ðŸ”­ ~ formUrlQuery ~ params âž¡ âž¡ ", params);
  const currentUrl = qs.parse(params);

  currentUrl[key] = value;
  console.log("ðŸ”­ ~ formUrlQuery ~ currentUrl âž¡ âž¡ ", currentUrl);

  return qs.stringifyUrl(
    {
      url: window.location.pathname,
      query: currentUrl,
    },
    { skipNull: true }
  );
}

export function removeKeysFromQuery({
  params,
  keysToRemove,
}: RemoveUrlQueryParams) {
  console.log("ðŸ”­ ~ removeKeysFromQuery ~ params âž¡ âž¡ ", params);
  const currentUrl = qs.parse(params);
  console.log("ðŸ”­ ~ removeKeysFromQuery ~ currentUrl âž¡ âž¡ ", currentUrl);

  keysToRemove.forEach((key) => {
    delete currentUrl[key];
  });

  return qs.stringifyUrl(
    {
      url: window.location.pathname,
      query: currentUrl,
    },
    { skipNull: true }
  );
}

export const handleError = (error: unknown) => {
  console.error(error);
  throw new Error(typeof error === "string" ? error : JSON.stringify(error));
};
